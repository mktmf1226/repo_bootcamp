1. 배열에 단어를 저장한다. 예시(apple, pear, banana, orange, strawberry)

2. 게임 시작 button을 만들고 onclick이벤트를 걸어둔다.

3. 게임시작 onclick이벤트 안에 넣을 클래스를 생성한다.

  3-1. 랜덤 단어 뽑기
  저장된 배열의 길이를 구한다. (총 5개)
  랜덤으로 1~5 숫자 중 하나를 생성시킨다. (Math.random)
  배열에 해당하는 인덱스의 단어를 불러온다.
  단어를 글자글자로 쪼개서 배열을 생성한다. (answerArr)

  3-2. 단어의 철자 수 만큼 밑줄 그리기
  단어의 철자수를 가져온다(str.length)
  언더바(_)를 화면 공간에 철자수만큼 뿌린다.(언더방 하나당 str.length개 만큼 공간지정해주기)

4. 알파벳을 입력할 input과 입력 button을 만든다.

5. 입력button의 onclick 이벤트

  5-1. 문제의 알파벳과 입력한 알파벳을 비교한다.
  조건1. 입력한 알파벳이 한 글자인가?
  -> 문제의 단어배열 (answerArr)에서 어느 인덱스에 있는지 찾는다.(indexOf로 while문돌리기)
      없으면 x. 기회횟수가 1 까인다.
      있으면 언더바(_)의 순서에 맞는 자리에 해당 알파벳으로 변환하여 뿌린다. 기회횟수가 1 까인다.

  조건2. 입력한 알파벳이 두 글자 이상인가?(=단어인가?)
  -> 문제의 단어배열을 단어로 결합후 비교한다.
      틀리면 x. 기회횟수 1 까임
      맞으면 5-5로 이동.

  유효성검사.
  -> 단어 길이가 0 이하일 경우 무시. 숫자일 경우 무시. 한글일 경우 무시. 
      중복일 경우 (5-3번을 여기서 처리)


  5-2. 입력한 단어가 화면에 출력된다.
  입력할 때마다 historyArr 배열에 저장한다.(역대 입력한 단어나 알파벳 저장공간)
  입력한 단어는 화면에 stack이 쌓이듯 <div id="history"> 내에 한 줄<p> 한 줄 추가된다.


  5-3. 중복일 경우 input박스를 초기화시킨다.
  historyArr 배열과 비교하여 같은 단어 또는 알파벳이 있을 경우
  input박스의 value를 지운다.

  /* 5-4. 총 기회 횟수인 10에서부터 1씩 까인다. */

  5-5. 맞출경우 (10회 이내 && 단어가 같을때)
  성공을 화면에 출력한다. 게임을 종료시킨다.

  5-6. 실패할 경우 (10회 초과) 게임 종료
  실패를 화면에 출력한다. 게임을 종료시킨다.


---선언할 전역변수---
const wordArr 단어들집합
let answerArr 문제단어
let tryCount 기회횟수
let historyArr 입력저장공간

---재사용할 함수---
입력한 단어를 화면에 띄우는 함수 <p>태그
성공or실패를 띄우는 함수 alert로 할까


  